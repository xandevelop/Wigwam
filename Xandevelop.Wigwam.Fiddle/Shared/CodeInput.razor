﻿@using System.Text

<div style="height: 200px;">
		
	<div id="gutter"><pre>
		@GutterText</pre>
	</div>

<textarea placeholder="Enter Source Code" id="editing"
	spellcheck="false" 	 
	onscroll="let t = document.getElementById('editing').scrollTop;
    let l = document.getElementById('editing').scrollLeft;
	document.getElementById('highlighting').scrollLeft = l;
    document.getElementById('highlighting').scrollTop = t;
	document.getElementById('gutter').scrollLeft = l;
    document.getElementById('gutter').scrollTop = t;
"
	onkeydown="if (event.key == 'Tab') { 
    let element = document.getElementById('editing');
event.preventDefault();
let before_tab = element.value.slice(0, element.selectionStart);
let after_tab = element.value.slice(element.selectionEnd, element.value.length);
let cursor_pos = element.selectionEnd + 1;
element.value = before_tab + '\t' + after_tab; 
element.selectionStart = cursor_pos;
element.selectionEnd = cursor_pos;
    };"
	value="@Code"
	@oninput="@(x => OnInput(x))"	
>
</textarea>

<pre id="highlighting-content" aria-hidden="true">
<code class="language-html" id="highlighting">

	@FormattedCode
</code>
</pre>
</div>


@code {
	[Parameter] public string Code { get; set; } = "";
	[Parameter] public MarkupString FormattedCode { get; set; }
	[Parameter] public EventCallback<string> OnCodeChanged { get; set; }

	public MarkupString GutterText { get; set; }


	protected void OnInput(ChangeEventArgs x)
	{
		Code = (string)x.Value ?? "";
		GutterText =  GetGutterText()  ;

		OnCodeChanged.InvokeAsync(Code);
	}

	private MarkupString GetGutterText()
	{
		if(Code == null) return (MarkupString)"1";

		StringBuilder sb = new StringBuilder();

		var lineCount = Code.Split('\n').Count() + 1;
		for(int i = 1; i < lineCount; i++)
		{
			sb.Append($"{i}{Environment.NewLine}");
		}
		return (MarkupString)sb.ToString();
	}


	protected override void OnInitialized()
	{
		GutterText = GetGutterText();

	}
}
